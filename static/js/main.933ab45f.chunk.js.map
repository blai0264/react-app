{"version":3,"sources":["Loading.svg","Header.js","Person.js","Home.js","Posts.js","Todos.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setTimeout","home","refs","button","hidden","react_default","a","createElement","ref","NavLink","to","className","Component","Person","goToPosts","ev","id","state","history","push","concat","goToTodos","person","name","email","onClick","Home","buildList","data","setState","list","error","_this2","fetch","then","response","json","catch","_this3","src_Header","match","path","length","src","mySVG","map","Person_Person","key","Posts","posts","url","params","userID","post","body","Todos","todos","todo","title","completed","toString","NotFound","App","BrowserRouter","basename","Switch","Route","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.933ab45f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Loading.f2a54b0b.svg\";","import React, { Component } from 'react';\nimport {NavLink} from 'react-router-dom';\nimport './App.css';\n\nclass Header extends Component {\n  constructor(props){\n   super();\n   setTimeout(()=>{\n    let home = (this.props.home)\n    if (home){\n      this.refs.button.hidden = true;\n    }\n   }, 10)\n   \n  }\n  render() {\n    \n    return (\n        <nav>\n         <h1 ref=\"h1\">React Midterm<br/>\n         <NavLink to=\"/\"><button ref=\"button\" className=\"home\">Go Home</button></NavLink>\n         </h1> \n         </nav>       \n    );\n  }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter, NavLink, Route, Switch} from 'react-router-dom';\nexport default class Person extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n                id: this.props.person.id, \n                name: this.props.person.name, \n                email: this.props.person.email\n                \n\n        }\n    }\n\n    goToPosts = (ev) => {\n        let id = this.state.id\n        this.props.history.push(`/users/${id}/posts`)\n    }\n\n    goToTodos = (ev) => {\n        let id = this.state.id\n        this.props.history.push(`/users/${id}/todos`)\n    }\n\n    render(){\n\n        return(\n        <li className=\"person\">\n            <div>\n            <div className=\"labels\">\n            <p ref=\"nameLabel\" className=\"nameLabel\">Name: {this.state.name}</p>\n            <p ref=\"verseLabel\" className=\"verseLabel\">Email: {this.state.email}</p>\n            </div>\n            <div className=\"buttons\">\n            <button onClick={this.goToPosts}>Posts</button>\n            <button onClick={this.goToTodos}>Todos</button>\n            </div>\n            </div>\n        </li>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Header from './Header';\nimport Person from './Person';\nimport './App.css';\nimport mySVG from './Loading.svg';\n\n\nclass Home extends Component {\n    constructor(){\n      super();\n        this.state = {\n            list:[],\n            error: null,\n            home: \"Home\"\n        }\n    }\n\n    buildList = (data) =>{\n      this.setState({list: data})\n    }\n    \n    componentDidMount(){\n      let url = 'https://jsonplaceholder.typicode.com/users'\n      fetch(url)\n      .then(response => response.json())\n      .then(this.buildList)\n      .catch(error=>{\n        this.setState({error:error})\n      })\n    }\n\n    render() {\n    return (\n      <div>\n       <Header home={this.props.match.path}/>\n       <h2>List of Users</h2>\n       <ul className=\"main\">\n         {\n           this.state.list.length === 0 &&\n           <li className=\"loading\"><p>Loading data...</p><img src={mySVG}/></li>\n         }\n         {\n           this.state.list.length > 0 &&\n            this.state.list.map((person) => (\n              <Person history={this.props.history} key={person.id} person={person}/>\n            ))\n         }\n       </ul>\n     \n\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter, NavLink, Route, Switch} from 'react-router-dom';\nimport Header from './Header';\nimport  mySVG from './Loading.svg';\n\nexport default class Posts extends Component{\n    constructor(){\n        super();\n          this.state = {\n              list:[],\n              error: null,\n              posts: \"Posts\"\n          }\n      }\n  \n      buildList = (data) =>{\n        this.setState({list: data})\n      }\n      \n      componentDidMount(){\n        let url = `https://jsonplaceholder.typicode.com/users/${this.props.match.params.userID}/posts`\n        fetch(url)\n        .then(response => response.json())\n        .then(this.buildList)\n        .catch(error=>{\n          this.setState({error:error})\n        })\n      }\n\n    \n    \n    render(){\n        return(\n            <div>\n            <Header/>\n            <h2>List of Posts</h2>\n            <ul className=\"main\">\n              {\n                this.state.list.length === 0 &&\n                <li className=\"loading\"><p>Loading data...</p><img src={mySVG}/></li>\n              }\n              {\n                this.state.list.length > 0 &&\n                 this.state.list.map((post) => (\n                  <li key={post.id} className=\"person\"><p className=\"postTitle\">Post {post.id}</p><p className=\"description\">{post.body}</p></li>\n                 ))\n              }\n            </ul>\n          \n     \n           </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter, NavLink, Route, Switch} from 'react-router-dom';\nimport Header from './Header';\nimport mySVG from './Loading.svg';\nexport default class Todos extends Component{\n    constructor(){\n        super();\n          this.state = {\n              list:[],\n              error: null,\n              todos: \"Todos\"\n          }\n\n      }\n  \n      buildList = (data) =>{\n        this.setState({list: data})\n      }\n      \n      componentDidMount(){\n        let url = `https://jsonplaceholder.typicode.com/users/${this.props.match.params.userID}/todos`\n        fetch(url)\n        .then(response => response.json())\n        .then(this.buildList)\n        .catch(error=>{\n          this.setState({error:error})\n        })\n      }\n\n    \n    \n    render(){\n        return(\n          \n            <div>\n              <Header/>\n              <h2>List of Todos</h2>\n            <ul className=\"main\">\n              {\n                this.state.list.length === 0 &&\n                <li className=\"loading\"><p>Loading data...</p><img src={mySVG}/></li>\n              }\n              {\n                this.state.list.length > 0 &&\n                 this.state.list.map((todo) => (\n                  <li key={todo.id} className=\"todo\"><p className=\"todoTitle\">Task: {todo.title}</p><p className=\"completed\">Completed: {todo.completed.toString()}</p></li>\n                 ))\n              }\n            </ul>\n          \n     \n           </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\n\nclass NotFound extends Component {\n    render() {\n      return (\n        <ul>\n            <li className=\"notFound\">404: Page Not Found</li>\n        </ul>\n        \n      );\n    }\n  }\n  \n  export default NotFound;","import React, { Component, Fragment } from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Home from './Home';\nimport Header from './Header';\nimport Posts from './Posts';\nimport Todos from './Todos';\nimport NotFound from './NotFound';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename=\"/react-app/\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/users/:userID/posts\" component={Posts} />\n        <Route exact path=\"/users/:userID/todos\" component={Todos} />\n        <Route component={NotFound} />\n      </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}